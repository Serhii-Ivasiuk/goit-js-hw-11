{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,oDAKMC,EAAY,IAAI,E,WAAAC,eAEhBC,EAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,QAASF,SAASC,cAAc,aAG5BE,EAAyB,IAAIC,sBAAqB,SAAAC,EAAUC,G,IAARC,E,UAAK,GACzDA,EAAMC,iBACRF,EAASG,UAAUF,EAAMG,Q,WAuDdC,EAAoBC,MAAAC,KAAAC,U,CAtD/BC,G,IAIAC,EAAiB,K,SAINC,I,OAAAA,EAAfC,EAAAxB,EAAA,CAAAwB,EAAAC,GAAAC,MAAA,SAAAC,EAAgCC,G,IAqBxBC,EAHIC,EACKC,E,qEAlBfH,EAAEI,iBAEFC,IAEA/B,EAAUgC,YAEVhC,EAAUiC,MAAQP,EAAEZ,OAAOoB,SAASC,YAAYC,MAAMC,OAE9B,KAApBrC,EAAUiC,MAAY,C,sBACxB/B,EAAKC,KAAKmC,QAEVC,EAAiB,OAAQ,sC,oDASfvC,EAAUwC,Y,WAAhBb,EAA2Bc,EAAAC,KAH7Bd,EAGED,EAHFgB,KACAd,EAEEF,EAFFiB,UAIe,IAFbjB,EADFkB,MAGgB,C,uBAChBN,EACE,UACA,4E,2BAKJA,EAAiB,UAAW,oBAAkCO,OAAdjB,EAAc,aAE9DkB,EAAYnB,GAEZR,EAAiB,IAAIE,EAAA0B,GAAJ,CAAmB,cAEpCC,I,kDAEAV,EACE,UACA,mD,2DAzCyBvB,MAAAC,KAAAC,U,UA8ChBH,I,OAAAA,EAAfO,EAAAxB,EAAA,CAAAwB,EAAAC,GAAAC,MAAA,SAAAC,I,IAKME,EADYC,EAAmBC,E,yEAHnC7B,EAAUkD,gB,kBAIAlD,EAAUwC,Y,UAAhBb,EAA2Bc,EAAAC,KADrBd,EACND,EADMgB,KAAcd,EACpBF,EADoBiB,UAGtBG,EAAYnB,GAEZuB,IAEA/B,EAAegC,YAEXvB,EAAgB7B,EAAUqD,KAAOrD,EAAUsD,SAAO,C,uBACpDf,EACE,OACA,8DAEFgB,I,2BAIFN,I,kDAEAV,EACE,UACA,mD,2DA1B6BvB,MAAAC,KAAAC,U,CA+BnC,SAAS+B,IACP,IAAMO,EAAWpD,SAASC,cAAc,2BACpCmD,GACFjD,EAAuBkD,QAAQD,E,CAInC,SAAST,EAAYW,GACnBA,EAAKC,KACH,SAAAlD,G,IACEmD,EAAYnD,EAAZmD,aACAC,EAAapD,EAAboD,cACAC,EAAIrD,EAAJqD,KACAC,EAAKtD,EAALsD,MACAC,EAAKvD,EAALuD,MACAC,EAAQxD,EAARwD,SACAC,EAASzD,EAATyD,UAEAhE,EAAKI,QAAQ6D,mBACX,YACA,sBAGgBrB,OAFLe,EAAc,kEAEaf,OAAtBc,EAAa,WAInBd,OAJ4BgB,EAAK,4IAQjChB,OAJAiB,EAAM,6GAQNjB,OAJAkB,EAAM,gHAQNlB,OAJAmB,EAAS,iHAICnB,OAAVoB,EAAU,sF,IAW5B,SAASX,IACPrD,EAAKI,QAAQ6D,mBACX,YACC,kF,CAQL,SAASpC,IACP7B,EAAKI,QAAQ8D,UAAY,E,CAG3B,SAAS7B,EAAiB8B,EAAMC,GAC9B,OAAOhD,EAAAiD,GAASC,OAAOH,GAAMC,E,CAG/B,SAASnB,IACP,IAAQsB,EACNvE,EAAKI,QAAQoE,kBAAkBC,wBADzBC,OAGRC,OAAOC,SAAS,CACdC,IAAkB,EAAbN,EACLO,SAAU,U,CA1Jd9E,EAAKC,KAAK8E,iBAAiB,U,SAEKvD,G,OAAjBL,EAAgBL,MAAAC,KAAAC,U","sources":["src/js/02-infinite-scroll.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport { ImagesService } from './services/get-images-service';\n\nconst ImagesApi = new ImagesService();\n\nconst refs = {\n  form: document.querySelector('#search-form'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconst infiniteScrollObserver = new IntersectionObserver(([entry], observer) => {\n  if (entry.isIntersecting) {\n    observer.unobserve(entry.target);\n    handleInfiniteScroll();\n  }\n});\n\nlet simpleLightbox = null;\n\nrefs.form.addEventListener('submit', handleFormSubmit);\n\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n\n  clearMarkup();\n\n  ImagesApi.pageReset();\n\n  ImagesApi.query = e.target.elements.searchQuery.value.trim();\n\n  if (ImagesApi.query === '') {\n    refs.form.reset();\n\n    showNotification('info', 'Please, enter your search request.');\n    return;\n  }\n\n  try {\n    const {\n      hits: images,\n      totalHits: totalQuantity,\n      total: quantity,\n    } = await ImagesApi.getImages();\n\n    if (quantity === 0) {\n      showNotification(\n        'failure',\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    }\n\n    showNotification('success', `Hooray! We found ${totalQuantity} images.`);\n\n    renderCards(images);\n\n    simpleLightbox = new SimpleLightbox('.gallery a');\n\n    addObserver();\n  } catch {\n    showNotification(\n      'failure',\n      'Something went wrong... Please try again later.'\n    );\n  }\n}\n\nasync function handleInfiniteScroll() {\n  ImagesApi.incrementPage();\n\n  try {\n    const { hits: images, totalHits: totalQuantity } =\n      await ImagesApi.getImages();\n\n    renderCards(images);\n\n    autoScrollPage();\n\n    simpleLightbox.refresh();\n\n    if (totalQuantity < ImagesApi.page * ImagesApi.perPage) {\n      showNotification(\n        'info',\n        \"We're sorry, but you've reached the end of search results.\"\n      );\n      renderEndMessage();\n      return;\n    }\n\n    addObserver();\n  } catch {\n    showNotification(\n      'failure',\n      'Something went wrong... Please try again later.'\n    );\n  }\n}\n\nfunction addObserver() {\n  const lastCard = document.querySelector('.gallery > a:last-child');\n  if (lastCard) {\n    infiniteScrollObserver.observe(lastCard);\n  }\n}\n\nfunction renderCards(data) {\n  data.map(\n    ({\n      webformatURL,\n      largeImageURL,\n      tags,\n      likes,\n      views,\n      comments,\n      downloads,\n    }) => {\n      refs.gallery.insertAdjacentHTML(\n        'beforeend',\n        `\n        <a href=\"${largeImageURL}\">\n          <div class=\"photo-card\">\n            <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n            <div class=\"info\">\n              <p class=\"info-item\">\n                <b>Likes</b>\n                ${likes}\n              </p>\n              <p class=\"info-item\">\n                <b>Views</b>\n                ${views}\n              </p>\n              <p class=\"info-item\">\n                <b>Comments</b>\n                ${comments}\n              </p>\n              <p class=\"info-item\">\n                <b>Downloads</b>\n                ${downloads}\n              </p>\n            </div>\n          </div>\n        </a>\n        `\n      );\n    }\n  );\n}\n\nfunction renderEndMessage() {\n  refs.gallery.insertAdjacentHTML(\n    'beforeend',\n    `\n    <p class=\"end-message\">\n      The end of search results.\n    </p>\n    `\n  );\n}\n\nfunction clearMarkup() {\n  refs.gallery.innerHTML = '';\n}\n\nfunction showNotification(type, message) {\n  return Notiflix.Notify[type](message);\n}\n\nfunction autoScrollPage() {\n  const { height: cardHeight } =\n    refs.gallery.firstElementChild.getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n"],"names":["$bpxeT","parcelRequire","$5004a27847ccf0a5$var$ImagesApi","ImagesService","$5004a27847ccf0a5$var$refs","form","document","querySelector","gallery","$5004a27847ccf0a5$var$infiniteScrollObserver","IntersectionObserver","param","observer","entry","isIntersecting","unobserve","target","$5004a27847ccf0a5$var$_handleInfiniteScroll","apply","this","arguments","$5004a27847ccf0a5$var$handleInfiniteScroll","$5004a27847ccf0a5$var$simpleLightbox","$5004a27847ccf0a5$var$_handleFormSubmit","$parcel$interopDefault","$2TvXO","mark","_callee","e","ref","images","totalQuantity","preventDefault","$5004a27847ccf0a5$var$clearMarkup","pageReset","query","elements","searchQuery","value","trim","reset","$5004a27847ccf0a5$var$showNotification","getImages","_ctx","sent","hits","totalHits","total","concat","$5004a27847ccf0a5$var$renderCards","$5IjG7","$5004a27847ccf0a5$var$addObserver","incrementPage","$5004a27847ccf0a5$var$autoScrollPage","refresh","page","perPage","$5004a27847ccf0a5$var$renderEndMessage","lastCard","observe","data","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","insertAdjacentHTML","innerHTML","type","message","$6JpON","Notify","cardHeight","firstElementChild","getBoundingClientRect","height","window","scrollBy","top","behavior","addEventListener"],"version":3,"file":"02-infinite-scroll.9ea6dc10.js.map"}