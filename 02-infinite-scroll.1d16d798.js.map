{"mappings":"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","sources":["src/js/02-infinite-scroll.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport axios from 'axios';\n\nconst refs = {\n  form: document.querySelector('#search-form'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconst notificationType = {\n  SUCCESS: 'success',\n  FAILURE: 'failure',\n  INFO: 'info',\n};\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst searchParams = new URLSearchParams({\n  key: '34105026-760e87e01f05ad85b03df7d04',\n  q: '',\n  image_type: 'photo',\n  orientation: 'horizontal',\n  safesearch: true,\n  per_page: 40,\n  page: 1,\n});\n\nconst infiniteScrollObserver = new IntersectionObserver(([entry], observer) => {\n  if (entry.isIntersecting) {\n    observer.unobserve(entry.target);\n    handleInfiniteScroll();\n  }\n});\n\nlet page = 1;\nlet simpleLightbox = null;\n\nrefs.form.addEventListener('submit', handleFormSubmit);\n\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n\n  clearMarkup();\n\n  searchParams.set('page', page);\n\n  const query = e.target.elements.searchQuery.value.trim();\n\n  if (query === '') {\n    refs.form.reset();\n    showNotification(\n      notificationType.INFO,\n      'Please, enter your search request.'\n    );\n    return;\n  }\n\n  searchParams.set('q', query);\n\n  const response = await getImages();\n\n  if (response.data.total === 0) {\n    showNotification(\n      notificationType.FAILURE,\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n    return;\n  }\n\n  showNotification(\n    notificationType.SUCCESS,\n    `Hooray! We found ${response.data.totalHits} images.`\n  );\n\n  renderCards(response.data.hits);\n\n  addObserver();\n\n  simpleLightbox = new SimpleLightbox('.gallery a');\n}\n\nasync function handleInfiniteScroll() {\n  page += 1;\n\n  searchParams.set('page', page);\n\n  const response = await getImages();\n\n  renderCards(response.data.hits);\n\n  autoScrollPage();\n\n  simpleLightbox.refresh();\n\n  if (\n    response.data.totalHits <\n    searchParams.get('page') * searchParams.get('per_page')\n  ) {\n    showNotification(\n      notificationType.INFO,\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n    renderEndMessage();\n    return;\n  }\n\n  addObserver();\n}\n\nfunction addObserver() {\n  const lastCard = document.querySelector('.gallery > a:last-child');\n  if (lastCard) {\n    infiniteScrollObserver.observe(lastCard);\n  }\n}\n\nasync function getImages() {\n  try {\n    return await axios.get(`${BASE_URL}?${searchParams}`);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction renderCards(images) {\n  images.map(\n    ({\n      webformatURL,\n      largeImageURL,\n      tags,\n      likes,\n      views,\n      comments,\n      downloads,\n    }) => {\n      refs.gallery.insertAdjacentHTML(\n        'beforeend',\n        `\n        <a href=\"${largeImageURL}\">\n          <div class=\"photo-card\">\n            <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n            <div class=\"info\">\n              <p class=\"info-item\">\n                <b>Likes</b>\n                ${likes}\n              </p>\n              <p class=\"info-item\">\n                <b>Views</b>\n                ${views}\n              </p>\n              <p class=\"info-item\">\n                <b>Comments</b>\n                ${comments}\n              </p>\n              <p class=\"info-item\">\n                <b>Downloads</b>\n                ${downloads}\n              </p>\n            </div>\n          </div>\n        </a>\n        `\n      );\n    }\n  );\n}\n\nfunction renderEndMessage() {\n  refs.gallery.insertAdjacentHTML(\n    'beforeend',\n    `\n    <p class=\"end-message\">\n      The end of search results.\n    </p>\n    `\n  );\n}\n\nfunction clearMarkup() {\n  refs.gallery.innerHTML = '';\n}\n\nfunction showNotification(type, message) {\n  return Notiflix.Notify[type](message);\n}\n\nfunction autoScrollPage() {\n  const { height: cardHeight } =\n    refs.gallery.firstElementChild.getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n"],"names":["$bpxeT","parcelRequire","$5004a27847ccf0a5$var$refs","form","document","querySelector","gallery","$5004a27847ccf0a5$var$notificationType","$5004a27847ccf0a5$var$BASE_URL","$5004a27847ccf0a5$var$searchParams","URLSearchParams","key","q","image_type","orientation","safesearch","per_page","page","$5004a27847ccf0a5$var$infiniteScrollObserver","IntersectionObserver","param","observer","entry","isIntersecting","unobserve","target","$5004a27847ccf0a5$var$_handleInfiniteScroll","apply","this","arguments","$5004a27847ccf0a5$var$handleInfiniteScroll","$5004a27847ccf0a5$var$page","$5004a27847ccf0a5$var$simpleLightbox","$5004a27847ccf0a5$var$_handleFormSubmit","$parcel$interopDefault","$2TvXO","mark","_callee","e","query","response","preventDefault","$5004a27847ccf0a5$var$clearMarkup","set","elements","searchQuery","value","trim","reset","$5004a27847ccf0a5$var$showNotification","$5004a27847ccf0a5$var$getImages","_ctx","sent","data","total","concat","totalHits","$5004a27847ccf0a5$var$renderCards","hits","$5004a27847ccf0a5$var$addObserver","$5IjG7","$5004a27847ccf0a5$var$autoScrollPage","refresh","get","$5004a27847ccf0a5$var$renderEndMessage","lastCard","observe","$5004a27847ccf0a5$var$_getImages","$dIxxU","default","console","error","t0","images","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","insertAdjacentHTML","innerHTML","type","message","$6JpON","Notify","cardHeight","firstElementChild","getBoundingClientRect","height","window","scrollBy","top","behavior","addEventListener"],"version":3,"file":"02-infinite-scroll.1d16d798.js.map"}