{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aAKA,MAAMC,EAAY,IAAI,E,WAAAC,eAEhBC,EAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,QAASF,SAASC,cAAc,aAG5BE,EAAyB,IAAIC,sBAAqB,EAAEC,GAAQC,KAC5DD,EAAME,iBACRD,EAASE,UAAUH,EAAMI,QAuD7BC,iBACEd,EAAUe,gBAEV,IACE,MAAQC,KAAMC,EAAQC,UAAWC,SACzBnB,EAAUoB,YAQlB,GANAC,EAAYJ,GA6FhB,WACE,MAAQK,OAAQC,GACdrB,EAAKI,QAAQkB,kBAAkBC,wBAEjCC,OAAOC,SAAS,CACdC,IAAkB,EAAbL,EACLM,SAAU,U,CAjGVC,GAEAC,EAAeC,UAEXb,EAAgBnB,EAAUiC,KAAOjC,EAAUkC,QAM7C,OALAC,EACE,OACA,mEAkENjC,EAAKI,QAAQ8B,mBACX,YACA,mFA9DAC,G,CACA,MACAF,EACE,UACA,kD,EAhFFG,G,IAIJ,IAAIP,EAAiB,KAiFrB,SAASM,IACP,MAAME,EAAWnC,SAASC,cAAc,2BACpCkC,GACFhC,EAAuBiC,QAAQD,E,CAInC,SAASlB,EAAYoB,GACnBA,EAAKC,KACH,EAACC,aACCA,EAAYC,cACZA,EAAaC,KACbA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,MAEA/C,EAAKI,QAAQ8B,mBACX,YACA,sBACWQ,kEAEKD,WAAsBE,4IAI5BC,6GAIAC,gHAIAC,iHAIAC,sFAMX,G,CAoBP,SAASd,EAAiBe,EAAMC,GAC9B,OAAOC,EAAAtD,GAASuD,OAAOH,GAAMC,E,CAjJ/BjD,EAAKC,KAAKmD,iBAAiB,UAE3BxC,eAAgCyC,GAS9B,GARAA,EAAEC,iBAyIJ,WACEtD,EAAKI,QAAQmD,UAAY,E,CAxIzBC,GAEA1D,EAAU2D,YAEV3D,EAAU4D,MAAQL,EAAE1C,OAAOgD,SAASC,YAAYC,MAAMC,OAE9B,KAApBhE,EAAU4D,MAIZ,OAHA1D,EAAKC,KAAK8D,aAEV9B,EAAiB,OAAQ,sCAI3B,IACE,MACEnB,KAAMC,EACNC,UAAWC,EACX+C,MAAOC,SACCnE,EAAUoB,YAEpB,GAAiB,IAAb+C,EAKF,YAJAhC,EACE,UACA,4EAKJA,EAAiB,UAAW,oBAAoBhB,aAEhDE,EAAYJ,GAEZc,EAAiB,IAAIqB,EAAAgB,GAAJ,CAAmB,cAEpC/B,G,CACA,MACAF,EACE,UACA,kD","sources":["src/js/02-infinite-scroll.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport { ImagesService } from './services/get-images-service';\n\nconst ImagesApi = new ImagesService();\n\nconst refs = {\n  form: document.querySelector('#search-form'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconst infiniteScrollObserver = new IntersectionObserver(([entry], observer) => {\n  if (entry.isIntersecting) {\n    observer.unobserve(entry.target);\n    handleInfiniteScroll();\n  }\n});\n\nlet simpleLightbox = null;\n\nrefs.form.addEventListener('submit', handleFormSubmit);\n\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n\n  clearMarkup();\n\n  ImagesApi.pageReset();\n\n  ImagesApi.query = e.target.elements.searchQuery.value.trim();\n\n  if (ImagesApi.query === '') {\n    refs.form.reset();\n\n    showNotification('info', 'Please, enter your search request.');\n    return;\n  }\n\n  try {\n    const {\n      hits: images,\n      totalHits: totalQuantity,\n      total: quantity,\n    } = await ImagesApi.getImages();\n\n    if (quantity === 0) {\n      showNotification(\n        'failure',\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    }\n\n    showNotification('success', `Hooray! We found ${totalQuantity} images.`);\n\n    renderCards(images);\n\n    simpleLightbox = new SimpleLightbox('.gallery a');\n\n    addObserver();\n  } catch {\n    showNotification(\n      'failure',\n      'Something went wrong... Please try again later.'\n    );\n  }\n}\n\nasync function handleInfiniteScroll() {\n  ImagesApi.incrementPage();\n\n  try {\n    const { hits: images, totalHits: totalQuantity } =\n      await ImagesApi.getImages();\n\n    renderCards(images);\n\n    autoScrollPage();\n\n    simpleLightbox.refresh();\n\n    if (totalQuantity < ImagesApi.page * ImagesApi.perPage) {\n      showNotification(\n        'info',\n        \"We're sorry, but you've reached the end of search results.\"\n      );\n      renderEndMessage();\n      return;\n    }\n\n    addObserver();\n  } catch {\n    showNotification(\n      'failure',\n      'Something went wrong... Please try again later.'\n    );\n  }\n}\n\nfunction addObserver() {\n  const lastCard = document.querySelector('.gallery > a:last-child');\n  if (lastCard) {\n    infiniteScrollObserver.observe(lastCard);\n  }\n}\n\nfunction renderCards(data) {\n  data.map(\n    ({\n      webformatURL,\n      largeImageURL,\n      tags,\n      likes,\n      views,\n      comments,\n      downloads,\n    }) => {\n      refs.gallery.insertAdjacentHTML(\n        'beforeend',\n        `\n        <a href=\"${largeImageURL}\">\n          <div class=\"photo-card\">\n            <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n            <div class=\"info\">\n              <p class=\"info-item\">\n                <b>Likes</b>\n                ${likes}\n              </p>\n              <p class=\"info-item\">\n                <b>Views</b>\n                ${views}\n              </p>\n              <p class=\"info-item\">\n                <b>Comments</b>\n                ${comments}\n              </p>\n              <p class=\"info-item\">\n                <b>Downloads</b>\n                ${downloads}\n              </p>\n            </div>\n          </div>\n        </a>\n        `\n      );\n    }\n  );\n}\n\nfunction renderEndMessage() {\n  refs.gallery.insertAdjacentHTML(\n    'beforeend',\n    `\n    <p class=\"end-message\">\n      The end of search results.\n    </p>\n    `\n  );\n}\n\nfunction clearMarkup() {\n  refs.gallery.innerHTML = '';\n}\n\nfunction showNotification(type, message) {\n  return Notiflix.Notify[type](message);\n}\n\nfunction autoScrollPage() {\n  const { height: cardHeight } =\n    refs.gallery.firstElementChild.getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$f3353f9eb86277b7$var$ImagesApi","ImagesService","$f3353f9eb86277b7$var$refs","form","document","querySelector","gallery","$f3353f9eb86277b7$var$infiniteScrollObserver","IntersectionObserver","entry","observer","isIntersecting","unobserve","target","async","incrementPage","hits","images","totalHits","totalQuantity","getImages","$f3353f9eb86277b7$var$renderCards","height","cardHeight","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","$f3353f9eb86277b7$var$autoScrollPage","$f3353f9eb86277b7$var$simpleLightbox","refresh","page","perPage","$f3353f9eb86277b7$var$showNotification","insertAdjacentHTML","$f3353f9eb86277b7$var$addObserver","$f3353f9eb86277b7$var$handleInfiniteScroll","lastCard","observe","data","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","type","message","$parcel$interopDefault","Notify","addEventListener","e","preventDefault","innerHTML","$f3353f9eb86277b7$var$clearMarkup","pageReset","query","elements","searchQuery","value","trim","reset","total","quantity","$fZKcF"],"version":3,"file":"02-infinite-scroll.c3a18329.js.map"}