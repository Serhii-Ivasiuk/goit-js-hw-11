{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,0BAKA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,QAASF,SAASC,cAAc,aAG5BE,EACK,UADLA,EAEK,UAFLA,EAGE,OAIFC,EAAe,IAAIC,gBAAgB,CACvCC,IAAK,qCACLC,EAAG,GACHC,WAAY,QACZC,YAAa,aACbC,YAAY,EACZC,SAAU,GACVC,KAAM,IAGFC,EAAyB,IAAIC,sBAAqB,EAAEC,GAAQC,KAC5DD,EAAME,iBACRD,EAASE,UAAUH,EAAMI,QAsD7BC,iBACEC,GAAQ,EAERjB,EAAakB,IAAI,OAAQD,GAEzB,MAAME,QAAiBC,IAQvB,GANAC,EAAYF,EAASG,KAAKC,MAkG5B,WACE,MAAQC,OAAQC,GACd/B,EAAKI,QAAQ4B,kBAAkBC,wBAEjCC,OAAOC,SAAS,CACdC,IAAkB,EAAbL,EACLM,SAAU,U,CAtGZC,GAEAC,EAAeC,UAGbf,EAASG,KAAKa,UACdnC,EAAaoC,IAAI,QAAUpC,EAAaoC,IAAI,YAO5C,OALAC,EACEtC,EACA,mEAoEJL,EAAKI,QAAQwC,mBACX,YACA,mFAhEFC,G,CA9EEC,G,IAIJ,IAAIvB,EAAO,EACPgB,EAAiB,KA4ErB,SAASM,IACP,MAAME,EAAW7C,SAASC,cAAc,2BACpC4C,GACFhC,EAAuBiC,QAAQD,E,CAInCzB,eAAeI,IACb,IACE,aAAauB,EAAAC,QAAMR,IAAI,4BAAepC,I,CACtC,MAAO6C,GACPC,QAAQD,MAAMA,E,EAIlB,SAASxB,EAAY0B,GACnBA,EAAOC,KACL,EAACC,aACCA,EAAYC,cACZA,EAAaC,KACbA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,MAEA7D,EAAKI,QAAQwC,mBACX,YACA,sBACWY,kEAEKD,WAAsBE,4IAI5BC,6GAIAC,gHAIAC,iHAIAC,sFAMX,G,CAoBP,SAASlB,EAAiBmB,EAAMC,GAC9B,OAAOC,EAAAlE,GAASmE,OAAOH,GAAMC,E,CApJ/B/D,EAAKC,KAAKiE,iBAAiB,UAE3B5C,eAAgC6C,GAC9BA,EAAEC,iBA6IFpE,EAAKI,QAAQiE,UAAY,GAzIzB9C,EAAO,EAEPjB,EAAakB,IAAI,OAAQD,GAEzB,MAAM+C,EAAQH,EAAE9C,OAAOkD,SAASC,YAAYC,MAAMC,OAElD,GAAc,KAAVJ,EAMF,OALAtE,EAAKC,KAAK0E,aACVhC,EACEtC,EACA,sCAKJC,EAAakB,IAAI,IAAK8C,GAEtB,MAAM7C,QAAiBC,IAEvB,GAA4B,IAAxBD,EAASG,KAAKgD,MAKhB,YAJAjC,EACEtC,EACA,4EAKJsC,EACEtC,EACA,oBAAoBoB,EAASG,KAAKa,qBAGpCd,EAAYF,EAASG,KAAKC,MAE1BgB,IAEAN,EAAiB,IAAIyB,EAAAa,GAAJ,CAAmB,a","sources":["src/js/02-infinite-scroll.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport axios from 'axios';\n\nconst refs = {\n  form: document.querySelector('#search-form'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconst notificationType = {\n  SUCCESS: 'success',\n  FAILURE: 'failure',\n  INFO: 'info',\n};\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst searchParams = new URLSearchParams({\n  key: '34105026-760e87e01f05ad85b03df7d04',\n  q: '',\n  image_type: 'photo',\n  orientation: 'horizontal',\n  safesearch: true,\n  per_page: 40,\n  page: 1,\n});\n\nconst infiniteScrollObserver = new IntersectionObserver(([entry], observer) => {\n  if (entry.isIntersecting) {\n    observer.unobserve(entry.target);\n    handleInfiniteScroll();\n  }\n});\n\nlet page = 0;\nlet simpleLightbox = null;\n\nrefs.form.addEventListener('submit', handleFormSubmit);\n\nasync function handleFormSubmit(e) {\n  e.preventDefault();\n\n  clearMarkup();\n\n  page = 1;\n\n  searchParams.set('page', page);\n\n  const query = e.target.elements.searchQuery.value.trim();\n\n  if (query === '') {\n    refs.form.reset();\n    showNotification(\n      notificationType.INFO,\n      'Please, enter your search request.'\n    );\n    return;\n  }\n\n  searchParams.set('q', query);\n\n  const response = await getImages();\n\n  if (response.data.total === 0) {\n    showNotification(\n      notificationType.FAILURE,\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n    return;\n  }\n\n  showNotification(\n    notificationType.SUCCESS,\n    `Hooray! We found ${response.data.totalHits} images.`\n  );\n\n  renderCards(response.data.hits);\n\n  addObserver();\n\n  simpleLightbox = new SimpleLightbox('.gallery a');\n}\n\nasync function handleInfiniteScroll() {\n  page += 1;\n\n  searchParams.set('page', page);\n\n  const response = await getImages();\n\n  renderCards(response.data.hits);\n\n  autoScrollPage();\n\n  simpleLightbox.refresh();\n\n  if (\n    response.data.totalHits <\n    searchParams.get('page') * searchParams.get('per_page')\n  ) {\n    showNotification(\n      notificationType.INFO,\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n    renderEndMessage();\n    return;\n  }\n\n  addObserver();\n}\n\nfunction addObserver() {\n  const lastCard = document.querySelector('.gallery > a:last-child');\n  if (lastCard) {\n    infiniteScrollObserver.observe(lastCard);\n  }\n}\n\nasync function getImages() {\n  try {\n    return await axios.get(`${BASE_URL}?${searchParams}`);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction renderCards(images) {\n  images.map(\n    ({\n      webformatURL,\n      largeImageURL,\n      tags,\n      likes,\n      views,\n      comments,\n      downloads,\n    }) => {\n      refs.gallery.insertAdjacentHTML(\n        'beforeend',\n        `\n        <a href=\"${largeImageURL}\">\n          <div class=\"photo-card\">\n            <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n            <div class=\"info\">\n              <p class=\"info-item\">\n                <b>Likes</b>\n                ${likes}\n              </p>\n              <p class=\"info-item\">\n                <b>Views</b>\n                ${views}\n              </p>\n              <p class=\"info-item\">\n                <b>Comments</b>\n                ${comments}\n              </p>\n              <p class=\"info-item\">\n                <b>Downloads</b>\n                ${downloads}\n              </p>\n            </div>\n          </div>\n        </a>\n        `\n      );\n    }\n  );\n}\n\nfunction renderEndMessage() {\n  refs.gallery.insertAdjacentHTML(\n    'beforeend',\n    `\n    <p class=\"end-message\">\n      The end of search results.\n    </p>\n    `\n  );\n}\n\nfunction clearMarkup() {\n  refs.gallery.innerHTML = '';\n}\n\nfunction showNotification(type, message) {\n  return Notiflix.Notify[type](message);\n}\n\nfunction autoScrollPage() {\n  const { height: cardHeight } =\n    refs.gallery.firstElementChild.getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$f3353f9eb86277b7$var$refs","form","document","querySelector","gallery","$f3353f9eb86277b7$var$notificationType","$f3353f9eb86277b7$var$searchParams","URLSearchParams","key","q","image_type","orientation","safesearch","per_page","page","$f3353f9eb86277b7$var$infiniteScrollObserver","IntersectionObserver","entry","observer","isIntersecting","unobserve","target","async","$f3353f9eb86277b7$var$page","set","response","$f3353f9eb86277b7$var$getImages","$f3353f9eb86277b7$var$renderCards","data","hits","height","cardHeight","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","$f3353f9eb86277b7$var$autoScrollPage","$f3353f9eb86277b7$var$simpleLightbox","refresh","totalHits","get","$f3353f9eb86277b7$var$showNotification","insertAdjacentHTML","$f3353f9eb86277b7$var$addObserver","$f3353f9eb86277b7$var$handleInfiniteScroll","lastCard","observe","$2shzp","default","error","console","images","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","type","message","$parcel$interopDefault","Notify","addEventListener","e","preventDefault","innerHTML","query","elements","searchQuery","value","trim","reset","total","$fZKcF"],"version":3,"file":"02-infinite-scroll.5d3c0e72.js.map"}